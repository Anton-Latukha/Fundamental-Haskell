~ParsecT e s m a~ (parser monad transformer) is a central data type in ~megaparsec~.

~e~ - custom component of error messages, if not - ~Void~.
~s~ - type of the input stream.
~m~ - inner monad. Most often it would be ~Identity~.
~a~ - result of parsing that would be returned inside ~m~.

Parser writing often starts by defining specialized data type, and so leveraging type synonym:
#+begin_src haskell
type Parsec a = ParsecT Void Text Identity a
#+end_src

* Tokens

~Token~ is an abstraction over ~{Text, ByteString, String, etc..}~.

Same parser can process different types of input streams, the ~Token~ abstraction handles that.

Abstraction of tokens under parsing to =chunk= introduced for performance reasons.

~token~ function takes:
  1. predicate (expanded into ~Maybe~);
  2. error information.
  returns: stream of ~Just~ values.

~satisfy~ - filter that takes the predicate and returns things that are ~true~.

~optional~ - parse with a result or yeald ~Nothing~. In ~Nothing~ case should not consume input - if parser position is not rolled back - fails with error.

Additional functions matching content:
  ~eof~
    To force consumption till ~EOF~:
    #+begin_src haskell
    runParser $ ... <* eof.
    #+end_src
  ~newline~
  ~single~
  ~char~
  ~tokens~
  ~chunk~

** Helpers
  ~decimal~
  ~integer~
  ~float~
  ~scientific~
  ~octal~
  ~hexadecimal~

  ~signed~

  ~charLiteral~
  ~stringLiteral~

  ~choise~ is an alias of ~asum~
  
** Parser consuming tokens

Combinators/functions can be used with ~{many, some}~ for according effect. For cases ~{many, some} $ satisfy~ there are more performant ~takeWhile{,1}P~.

Running parser combinators always consumes input and so - advances. To roll-back the try and be able to retry - use ~try~ combinator with ~<|>~.

~lookAhead~ & ~notFollowedBy~ are a dual pair that allows to do optional parsing.


** Labeling parts & hiding

To name a parser part, use ~label~, it would be used when error report is constructed.
To hide - use ~hidden~.

* Lexing

Lexing is a process of transforming raw input (~ByteString~ or ~Text~) into stream of sensible "tokens"(lexemes): ~{keyword, integer, command symbol, ...}~.

Space handler is defined over ~space~ function.

#+begin_src haskell
space :: MonadParsec e s m
  => m () -- ^ what is a parser for space characters (maybe `space1`)
  -> m () -- ^ for line comment (maybe `skipLineComment`)
  -> m () -- ^ for block comment (maybe `skipBlockComment`)
  -> m ()
#+end_src

To handle whitespaces, in Haskell parsers it is generally considered that lexeme tail allows/consumes arbitrary amount of spaces and newlines. Of cource lexeme & whitespace behaviour depends on the language, but generally languages parsed have regular properties.

So default lexeme implementation is:
#+begin_src haskell
lexeme = chunk <* emptySpaces
 where
  emptySpaces = space ...
#+end_src

* Debugging parser

Use ~dbg~ (use as exactly the same as to ~labe~) to get the trace of the parser step.

* Parsing everything together

~parse~ is a synonym for ~runParser~.
#+begin_src haskell
parse
  :: Parsec e s a -- ^ Parser to run
  -> String            -- ^ Name of source file (just for reporting)
  -> s            -- ^ Input for parser
  -> Either (ParseErrorBundle s e) a
#+end_src
~parseTest~ prints the result to ~stdout~.

=Expression= in parser (~megaparsec~) terms means a general knowledge of =expression algebra=.

** Parsing process

Constructing
  * AST data type
  * operator table
  * term parser

=term= - indivisible whole when associativity & precedence metters.

Term parser is a ~<|>~ precedence sequence of parsers cheching for possible terms.

Example:
#+begin_src haskell
nixExpr :: Parser NExpr
nixExpr = keywords <|> nixLambda <|> nixExprAlgebra
 where
  keywords = nixLet <|> nixIf <|> nixAssert <|> nixWith

#+end_src

~ParsecT e s m a~ (parser monad transformer) is a central data type in ~megaparsec~.

~e~ - custom component of error messages, if not - ~Void~.
~s~ - type of the input stream.
~m~ - inner monad. Most often it would be ~Identity~.
~a~ - result of parsing that would be returned inside ~m~.

Parser writing often starts over defining specialized data type, and so leveraging type synonym:
#+begin_src haskell
type Parsec a = ParsecT Void Text Identity a
#+end_src

~Token~ is an abstraction over ~{Text, ByteString, String, etc..}~.

Abstraction of tokens under parsing to =chunk= introduced for performance reasons.

Same parser can process different types of input streams, the ~Token~ abstraction handles that.
